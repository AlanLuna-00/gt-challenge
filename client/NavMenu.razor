@using client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject RoleService RoleService
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider AuthStateProvider



<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Gestion - Alan</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (isAuthenticated)
        {
            @if (canAccessUsers)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Users">
                        <span class="bi bi-person-lines-fill" aria-hidden="true"></span> Usuarios
                    </NavLink>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Products">
                    <span class="bi bi-receipt" aria-hidden="true"></span> Productos
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Orders">
                    <span class="bi bi-receipt" aria-hidden="true"></span> Órdenes
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Users/change-password">
                    <span class="bi bi-receipt" aria-hidden="true"></span> Cambiar password
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <button class="btn btn-link nav-link" @onclick="Logout">Logout</button>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <button class="btn btn-link nav-link" @onclick="Login">Login</button>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated = false;
    private bool canAccessUsers = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChangedExternally += HandleAuthenticationStateChanged;

        await UpdateAuthenticationState();
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            canAccessUsers = user.IsInRole("Admin") || user.IsInRole("Gerente");
        }
        else
        {
            canAccessUsers = false;
        }

        StateHasChanged();
    }

    
    private void HandleAuthenticationStateChanged()
    {
        Console.WriteLine("Authentication state changed detected.");
        InvokeAsync(UpdateAuthenticationState);
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/Login");
    }

    private async Task Logout()
    {
        await AuthStateProvider.NotifyUserLogoutAsync();
        NavigationManager.NavigateTo("/", true);
    }


    public void Dispose()
    {
        Console.WriteLine("NavMenu disposed.");
        AuthStateProvider.AuthenticationStateChangedExternally -= HandleAuthenticationStateChanged;
    }

}
